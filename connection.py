import psutil
from ipwhois import IPWhois
import socket
import const
import danger_counter
from virustotal3 import core
import config


class ProcessConnection:
    def __init__(self):
        self.exists_connection = []
        self.pid_connection = []
        self.ip_info = {}
        self.__init_connection()

    def __init_connection(self):
        print('[init check connection...]')
        listPid = psutil.pids()

        for pid in listPid:
            try:
                conns = psutil.Process(pid).connections()

                for c in conns:
                    if not (pid, c.raddr) in self.exists_connection and\
                            c.raddr != ():
                        self.exists_connection.append((pid, c.raddr))
            finally:
                continue

    def check_new_connection(self):
        list_pid = psutil.pids()

        for pid in list_pid:
            self.check_connection_by_pid(pid)

#    @staticmethod
    def check_connection_by_pid(self, pid):
        try:
            conns = psutil.Process(pid).connections()
            for c in conns:
                if pid not in self.pid_connection:
                    self.pid_connection.append(pid)
                    danger_counter.add(pid, const.CONNECTION_POINT)

                if not (pid, c.raddr) in self.exists_connection and \
                        c.raddr != ():
                    self.exists_connection.append((pid, c.raddr))
                    self.__fill_ip_info(c.raddr.ip)
                    print(f'  [{psutil.Process(pid).name()}][{pid}]:')
                    print(f'    [remote ip]:', c.raddr.ip)
                    print(f'    [remote port]:', c.raddr.port)
                    print(f'    [asn]:', self.ip_info[c.raddr.ip]['asn'])
                    print(f'    [asn country code]:', self.ip_info[c.raddr.ip]['asn_country_code'])
                    print(f'    [domain]:', self.ip_info[c.raddr.ip]['domain'])

                    malicious_points = self.__check_danger(c.raddr.ip)
                    print(f'    [malicious points by VirusTotal]:', malicious_points)
        finally:
            return

    def __fill_ip_info(self, ip):
        if ip not in self.ip_info.keys():
            try:
                obj = IPWhois(ip)
                res = obj.lookup_whois()
                try:
                    domain = socket.gethostbyaddr(ip)
                    res['domain'] = domain[0]
                except:
                    res['domain'] = ip
                self.ip_info[ip] = res
            finally:
                return

    @staticmethod
    def __check_danger(ip):
        vt = core.IP(config.API_KEY)
        result = vt.info_ip(ip=ip, timeout=500)
        last_analysis_stats = result['data']['attributes']['last_analysis_stats']
        malicious_points = last_analysis_stats['malicious']
        return malicious_points
