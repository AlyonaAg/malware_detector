import win32com.client
import ctypes
import threading
import process
import connection
import asyncio
import psutil

# pip install pypiwin32
gpa = 0
gpc = 0
class Hooks:
    @staticmethod
    def run(pa, pc):
        # TODO хз как еще передать объекты в этот класс с колбэками
        global gpa
        global gpc
        gpa = pa
        gpc = pc
        win32com.client.pythoncom.CoInitialize()
        processManager = win32com.client.DispatchWithEvents("DeviareCOM.NktSpyMgr", Callbacks)
        processManager.Initialize()
        hook = processManager.CreateHook("kernel32.dll!CreateProcess", 0)
        hook.Hook(True)
        MessageBox = ctypes.windll.user32.MessageBoxW
        MessageBox(None, "STOP", "", 0)


class Callbacks:
    def OnProcessStarted(self, pyPID):
        process = win32com.client.Dispatch(pyPID)
        name = process.Name.split('.')[0]
        pid = process.Id
        user = process.UserName
        print('Process Started:', name, pid, user)
        threading.Thread(target= self.analyzer, args=(pid,)).start()

    def OnProcessTerminated(self, pyPID):
        process = win32com.client.Dispatch(pyPID)
        name = process.Name.split('.')[0]
        pid = process.Id
        user = process.UserName
        print('Process Terminated:', name, pid, user)

    def analyzer(self, pid):
        global gpa
        global gpc
        while (pid in psutil.pids()):
            gpa.check_new_process_hook(pid)
            gpc.check_new_connection_hook(pid)

        print("Out")
