import asyncio
import danger_counter
import threading
import time

class TaskPlanner:
    def __init__(self, hook, process_connection, time_check_conn=10, time_overwrite=15):
        self.time_check_conn = time_check_conn
        self.time_overwrite = time_overwrite
        self.hook = hook
        self.pc = process_connection

    def run(self):
        threading.Thread(target=self.check_connection, args=()).start()
        threading.Thread(target=self.hook_func, args=()).start()
        threading.Thread(target=self.overwriting_danger, args=()).start()

    def hook_func(self):
        self.hook.run()

    def check_connection(self):
        while True:
            print('[start check new connection]')
            try:
                self.pc.check_new_connection()
            finally:
                print('[finish check new connection]')
                time.sleep(self.time_check_conn)

    def overwriting_danger(self):
        while True:
            print('[danger recalculation]')
            danger_counter.overwriting()
            time.sleep(self.time_check_conn)
